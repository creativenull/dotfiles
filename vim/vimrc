" Name: Arnold Chand
" Github: https://github.com/creativenull
" Requires:
"   + curl
"   + git
"   + python3
"   + ripgrep
" ============================================================================
" Initialize
"
" Tags: CONFIG
" ============================================================================

let g:config = {}
let g:config.key = {}
let g:config.key.leader = "\<Space>"

if has('win32')
  let g:config.cachedir = expand('$HOME/AppData/Local/Temp/vim')
  let g:config.configdir = expand('$HOME')
  let g:config.datadir = expand('$HOME/vimfiles')
else
  let g:config.cachedir = expand('$HOME/.cache/vim')
  let g:config.configdir = expand('$HOME')
  let g:config.datadir = expand('$HOME/.vim')
endif

let g:config.undodir = printf('%s/undo', g:config.cachedir)

let mapleader = g:config.key.leader

" Enable vim features
" ---
unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

filetype plugin indent on
syntax on

" ============================================================================
" Functions
"
" Tags: FUNC
" ============================================================================

" Check if the vim instance is running on a WSL vm
" Ref: https://github.com/neovim/neovim/issues/12642#issuecomment-658944841
function! s:IsWSL() abort
  let s:proc_version = '/proc/version'

  if !filereadable(s:proc_version)
    return 0
  endif

  let s:proc_result = readfile(s:proc_version, '', 1)->filter('v:val =~? "microsoft"')

  return !s:proc_result->empty()
endfunction

" Strip sign column, number line, etc to be able
" to copy and paste from a vim instance that has
" mouse disabled, or not able to use `"+y`.
"
" Example of such and instance is running vim in WSL2
function! s:ToggleCodeshot() abort
  if &number
    setlocal nonumber signcolumn=no
  else
    setlocal number signcolumn=yes
  endif
endfunction

" Toggle the conceallevel, should any syntax plugin overtake
" and hide/conceal words
function! s:ToggleConcealLevel() abort
  if &conceallevel == 2
    setlocal conceallevel=0
  else
    setlocal conceallevel=2
  endif
endfunction

function! s:PasteFromClipboard() abort
  set paste
  normal! "+p
  set nopaste
endfunction

function! s:ResizeHorizontalWindow(amount) abort
  if getwininfo()->len() > 1
    execute printf('resize %s%d', a:amount > 0 ? '+' : '', a:amount)
  endif
endfunction

function! s:ResizeVerticalWindow(amount) abort
  if getwininfo()->len() > 1
    execute printf('vertical resize %s%d', a:amount > 0 ? '+' : '', a:amount)
  endif
endfunction

function! g:CreateConfigSnapshot() abort
  let l:timestamp = localtime()
  let l:filename = printf('snapshot_%s.vim', l:timestamp)
  let l:filepath = printf("%s/snapshots/%s", g:config.datadir, l:filename)

  execute printf('PlugSnapshot %s', l:filepath)
endfunction

" ============================================================================
" Events
"
" Tags: AU
" ============================================================================

augroup UserGroup

" Different color when confirming selected substitution with `:s`
autocmd UserGroup ColorScheme * highlight IncSearch gui=NONE guibg=#103DA5 guifg=#eeeeee

" Custom default indent rules
autocmd UserGroup FileType javascript,javascriptreact setlocal softtabstop=2 shiftwidth=2 expandtab
autocmd UserGroup FileType json,jsonc setlocal softtabstop=2 shiftwidth=2 expandtab
autocmd UserGroup FileType markdown setlocal iskeyword+= softtabstop=2 shiftwidth=2 expandtab
autocmd UserGroup FileType php,blade,html setlocal iskeyword+= softtabstop=2 shiftwidth=2 expandtab
autocmd UserGroup FileType scss,sass,css setlocal softtabstop=2 shiftwidth=2 expandtab
autocmd UserGroup FileType typescript,typescriptreact setlocal softtabstop=2 shiftwidth=2 expandtab
autocmd UserGroup FileType vim,lua setlocal softtabstop=2 shiftwidth=2 expandtab
autocmd UserGroup FileType vue setlocal iskeyword+= softtabstop=2 shiftwidth=2 expandtab

" Custom ftdetect
autocmd UserGroup BufEnter,BufRead *.mdx setlocal filetype=markdown
autocmd UserGroup BufEnter,BufRead *.podspec setlocal filetype=ruby
autocmd UserGroup BufEnter,BufRead Podfile setlocal filetype=ruby
autocmd UserGroup BufEnter,BufRead .env.* setlocal filetype=sh

" ============================================================================
" Options
"
" Tags: OPTS
" ============================================================================

" Ensure dir for storing undo changes
if !isdirectory(g:config.undodir)
  if has('win32')
    execute printf('silent !mkdir %s', g:config.undodir)
  else
    execute printf('silent !mkdir -p %s', g:config.undodir)
  endif
endif

" Completion
set completeopt=menuone,noinsert,noselect
set shortmess+=c

" Search
set hlsearch
set ignorecase
set incsearch
set path=**
set showmatch
set smartcase
set wildmenu
set wildoptions=pum,fuzzy
set wildignore+=*.git/*,*node_modules/*,*vendor/*,*dist/*,*build/*

" Editor
set autoindent
set colorcolumn=80,120
set lazyredraw
set nofoldenable
set nospell
set nowrap
set scrolloff=1
set shiftwidth=4
set softtabstop=4
set tabstop=4
set smartindent
set smarttab
set wildignorecase

" System
let &undodir=g:config.undodir
set backspace=indent,eol,start
set encoding=utf-8
set history=10000
set nobackup
set noswapfile
set ttimeoutlen=50
set undofile
set undolevels=10000
set updatetime=250
set clipboard-=autoselect

if <SID>IsWSL()
  set mouse=
else
  set mouse=nv
endif

" UI
set cmdheight=2
set hidden
set laststatus=2
set number
set showtabline=0
set signcolumn=yes
set title
let &titlestring=printf('%s [nvim]', fnamemodify(getcwd(), ':t'))

if has('termguicolors')
  set termguicolors
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

" ============================================================================
" Keymaps
"
" Tags: KEY
" ============================================================================

" Unbind default bindings for arrow keys, trust me this is for your own good
noremap  <Up>    <Nop>
noremap  <Down>  <Nop>
noremap  <Left>  <Nop>
noremap  <Right> <Nop>
inoremap <Up>    <Nop>
inoremap <Down>  <Nop>
inoremap <Left>  <Nop>
inoremap <Right> <Nop>

noremap  <C-h> <Nop>
noremap  <C-j> <Nop>
noremap  <C-k> <Nop>
noremap  <C-l> <Nop>
inoremap <C-h> <Nop>
inoremap <C-j> <Nop>
inoremap <C-k> <Nop>
inoremap <C-l> <Nop>
vnoremap <C-h> <Nop>
vnoremap <C-j> <Nop>
vnoremap <C-k> <Nop>
vnoremap <C-l> <Nop>

" Resize window panes, we can use those arrow keys
" to help use resize windows - at least we give them some purpose
nnoremap <Up>    <Cmd>call <SID>ResizeHorizontalWindow(+2)<CR>
nnoremap <Down>  <Cmd>call <SID>ResizeHorizontalWindow(-2)<CR>
nnoremap <Left>  <Cmd>call <SID>ResizeVerticalWindow(-2)<CR>
nnoremap <Right> <Cmd>call <SID>ResizeVerticalWindow(+2)<CR>

" Map Esc, to perform quick switching between Normal and Insert mode
inoremap jk <Esc>

" Map escape from terminal input to Normal mode
tnoremap <Esc> <C-\><C-n>
tnoremap <C-[> <C-\><C-n>

" Disable highlights
nnoremap <Leader><CR> <Cmd>noh<CR>

" Close all buffer, except current
nnoremap <Leader>bx <Cmd>%bd<Bar>e#<Bar>bd#<CR>

" Edit vimrc
nnoremap <Leader>ve <Cmd>edit $MYVIMRC<CR>

" Source the vimrc to reflect changes
nnoremap <Leader>vs <Cmd>ConfigReload<CR>

" Reload file
nnoremap <Leader>r <Cmd>edit!<CR>

" Move lines up/down with alt+j/k
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

" Yank/Paste behaviour
vnoremap p "_dp
vnoremap P "_dP

" Copy/Paste system clipboard
nnoremap <Leader>y "+y
nnoremap <Leader>p <Cmd>call <SID>PasteFromClipboard()<CR>
nnoremap Y y$

" Execute last recorded macro
nnoremap Q @@

" ============================================================================
" User Commands
"
" Tags: CMD
" ============================================================================

command! Config edit $MYVIMRC
command! ConfigReload source $MYVIMRC | nohlsearch
command! ConfigSnapshot call <SID>ConfigSnapshot()

command! ToggleConcealLevel call <SID>ToggleConcealLevel()
command! ToggleCodeshot call <SID>ToggleCodeshot()

" Command Abbreviations, I can't release my shift key fast enough ðŸ˜­
cnoreabbrev Q  q
cnoreabbrev Qa qa
cnoreabbrev W  w
cnoreabbrev Wq wq

" ============================================================================
" Vim built-in packages
"
" Tags: PACK
" ============================================================================

packadd! matchit
packadd! editorconfig
packadd! comment
packadd! nohlsearch
packadd! hlyank

" ============================================================================
" Plugins
"
" Tags: PLUG
" ============================================================================

let data_dir = '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()

" Deps
" ---
Plug 'lambdalisue/vim-nerdfont'
Plug 'vim-denops/denops.vim'
Plug 'vim-denops/denops-shared-server.vim'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'

" Core
" ---
Plug 'cohama/lexima.vim'
Plug 'creativenull/projectlocal-vim', { 'tag': 'v1.*' }
Plug 'mattn/emmet-vim'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'Shougo/context_filetype.vim'
Plug 'markonm/traces.vim', #{ commit: '9663fcf84de5776bee71b6c816c25ccb6ea11d1a' }

" File explorer
" ---
Plug 'lambdalisue/vim-fern'
Plug 'lambdalisue/vim-fern-renderer-nerdfont'
Plug 'lambdalisue/vim-glyph-palette'

" Fuzzy finder/Code finder
" ---
" Plug 'junegunn/fzf', #{ tag: 'v0.62.*', do: { -> fzf#install()  }  }
" Plug 'junegunn/fzf.vim'
" Plug 'linrongbin16/fzfx.vim', #{ commit: '9bd93e78f22c734751688cefd3ee2c475cd85ccd'  }
Plug 'ctrlpvim/ctrlp.vim'

" Git
" ---
Plug 'tpope/vim-fugitive'
Plug 'itchyny/vim-gitbranch'
Plug 'airblade/vim-gitgutter'

" Linters + Formatters
" ---
Plug 'dense-analysis/ale'

" Autocompletion
" ---
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-buffer.vim'
Plug 'prabirshrestha/asyncomplete-file.vim'
Plug 'andreypopp/asyncomplete-ale.vim'

" UI/Aeshetics
" ---
Plug 'vim-airline/vim-airline'

" File syntax plugins
" ---

" Colorschemes
" ---
Plug 'bluz71/vim-moonfly-colors'
Plug 'bluz71/vim-nightfly-guicolors'

call plug#end()

" ============================================================================
" Plugin Configurations
"
" Tags: POST
" ============================================================================

" ale Config
" ---
let g:ale_completion_enabled = 0
let g:ale_completion_delay = 100
let g:ale_completion_max_suggestions = 10
let g:ale_hover_cursor = 0
let g:ale_echo_msg_error_str = 'Err'
let g:ale_sign_error = 'ï™™ '
let g:ale_echo_msg_warning_str = 'Warn'
let g:ale_sign_warning = 'ï”© '
let g:ale_echo_msg_info_str = 'Info'
let g:ale_sign_info = 'ï µ '
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_linters_explicit = 1
let g:ale_fixers = { '*': ['remove_trailing_lines', 'trim_whitespace']  }
let g:ale_virtualtext_cursor = 'disabled'
let g:ale_virtualtext_prefix = ''
let g:ale_floating_preview = 1
let g:ale_floating_window_border = []

nnoremap <silent> <Leader>ai <Cmd>ALEInfo<CR>
nnoremap <silent> <Leader>af <Cmd>ALEFix<CR>

nnoremap <silent> <Leader>le <Cmd>lopen<CR>
nnoremap <silent> <Leader>ld <Cmd>ALEGoToDefinition<CR>
nnoremap <silent> <Leader>lh <Cmd>ALEHover<CR>
nnoremap <silent> <Leader>lr <Cmd>ALERename<CR>
nnoremap <silent> <Leader>la <Cmd>ALECodeAction<CR>

" asyncomplete.vim Config
" ---
inoremap <expr> <CR> pumvisible() ? asyncomplete#close_popup() . "\<CR>" : "\<CR>"
imap <silent> <C-@> <Plug>(asyncomplete_force_refresh)

let g:asyncomplete_min_chars = 1

au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#ale#get_source_options({
  \'priority': 1,
\}))

au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
  \'name': 'buffer',
  \'allowlist': ['*'],
  \'priority': 5,
  \'completor': function('asyncomplete#sources#buffer#completor'),
\}))

au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
  \'name': 'file',
  \'allowlist': ['*'],
  \'priority': 10,
  \'completor': function('asyncomplete#sources#file#completor')
\}))

" fzf.vim Config
" ---
" let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --iglob !.git'
" let $FZF_DEFAULT_OPTS = '--reverse --color=border:#aaaaaa,gutter:-1,bg+:-1'
" let g:fzf_vim = #{
"   \preview_window: [],
"   \grep_multi_line: 1
" \}

" function! s:VimGrep(qargs, bang) abort
"   let s:sh = 'rg --column --line-number --no-heading --color=always --smart-case -- ' .. shellescape(a:qargs)
"   call fzf#vim#grep(s:sh, 1, fzf#vim#with_preview('right:50%', 'ctrl-/'), a:bang)
" endfunction

" command! -bang -nargs=* Rg call <SID>VimGrep(<q-args>, <bang>0)

" nnoremap <C-p> <Cmd>Files<CR>
" nnoremap <C-t> <Cmd>Rg<CR>
" nnoremap <C-y> <Cmd>call <SID>VimGrep(expand('<cword>'), 0)<CR>
" nnoremap <C-@> <Cmd>FzfxBuffers<CR>

" function! s:fzf_statusline()
"   " Override statusline as you like
"   highlight fzf1 guibg=NONE
"   setlocal statusline=%#fzf1#\ >\ fzf
" endfunction

" autocmd! User FzfStatusLine call <SID>fzf_statusline()
" autocmd! ColorScheme * highlight! fzfBorder guifg=#aaaaaa

" ctrlp.vim Config
" ---
let g:ctrlp_map = '<C-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 0

nnoremap <C-@> <Cmd>CtrlPBuffer<CR>

" fern.vim Config
" ---
let g:fern#hide_cursor = 1
let g:fern#default_hidden = 1
let g:fern#renderer = 'nerdfont'
let g:fern#renderer#nerdfont#root_symbol = 'î­… '
let g:fern#renderer#nerdfont#indent_markers = 1

nnoremap <Leader>ff <Cmd>Fern . -reveal=%<CR>

function! s:FernInit() abort
  nnoremap q <Cmd>bd<CR>
  nmap <buffer> D <Plug>(fern-action-remove)

  setlocal expandtab shiftwidth=2 tabstop=2

  call glyph_palette#apply()
endfunction

autocmd! FileType fern call <SID>FernInit()

" emmet-vim Config
" ---
let g:user_emmet_leader_key = '<C-q>'
let g:user_emmet_mode = 'in'
imap <C-x><C-y> <Plug>(emmet-expand-abbr)
nmap <Leader>er <Plug>(emmet-update-tag)
let g:user_emmet_settings = {
  \'blade': { 'extends': 'html' },
\}

" indentLine Config
" ---
let g:indentLine_char = 'â”‚'
let g:indentLine_fileTypeExclude = ['help', 'fern', 'fzf']

" vim-airline Config
" ---
let g:airline_experimental = 1
let g:airline_powerline_fonts = 1
let g:airline#extensions#ale#enabled = 1

let g:airline_section_z = 'â„…:%v, î‚¡:%L'

" hlyank Config
" ---
let g:hlyank_hlgroup = 'IncSearch'
let g:hlyank_duration = 250
let g:hlyank_invisual = 1

" ============================================================================
" Theme
"
" Tags: THEME
" ============================================================================

let g:moonflyNormalFloat = v:true
let g:moonflyTransparent = v:true

set background=dark
colorscheme moonfly
